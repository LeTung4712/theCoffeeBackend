<?php
namespace App\Console\Commands;

use App\Models\Admin;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class AdminManager extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'admin:manage';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Qu·∫£n l√Ω t√†i kho·∫£n admin (xem th√¥ng tin v√† ƒë·ªïi password)';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('=== ADMIN MANAGER ===');

        while (true) {
            $this->newLine();
            $this->line('1. Xem th√¥ng tin admin hi·ªán t·∫°i');
            $this->line('2. ƒê·ªïi password admin');
            $this->line('3. Tho√°t');
            $this->newLine();

            $choice = $this->ask('Ch·ªçn (1-3)');

            switch ($choice) {
                case '1':
                    $this->showAdminInfo();
                    break;
                case '2':
                    $this->resetPassword();
                    break;
                case '3':
                    $this->info('T·∫°m bi·ªát!');
                    return 0;
                default:
                    $this->error('L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!');
            }

            $this->newLine();
            $this->line(str_repeat('-', 30));
        }
    }

    private function showAdminInfo()
    {
        $this->newLine();
        $this->info('=== TH√îNG TIN ADMIN ===');

        $admin = Admin::first();

        if (! $admin) {
            $this->error('‚ùå Kh√¥ng t√¨m th·∫•y admin n√†o!');
            return;
        }

        $this->info('‚úÖ T√¨m th·∫•y admin:');
        $this->line("   ID: {$admin->id}");
        $this->line("   T√™n ƒëƒÉng nh·∫≠p: {$admin->username}");
        $this->line("   Ng√†y t·∫°o: {$admin->created_at}");
        $this->line("   C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {$admin->updated_at}");
    }

    private function resetPassword()
    {
        $this->newLine();
        $this->info('=== ƒê·ªîI PASSWORD ADMIN ===');

        $admin = Admin::first();

        if (! $admin) {
            $this->error('‚ùå Kh√¥ng t√¨m th·∫•y admin n√†o!');
            return;
        }

        $this->line("Admin hi·ªán t·∫°i: {$admin->id} ({$admin->username})");
        $this->newLine();

        $this->line('Ch·ªçn c√°ch t·∫°o password:');
        $this->line('1. T·ª± ƒë·ªông t·∫°o password ng·∫´u nhi√™n');
        $this->line('2. Nh·∫≠p password th·ªß c√¥ng');
        $this->line('3. H·ªßy');
        $this->newLine();

        $choice = $this->ask('Ch·ªçn (1-3)');

        switch ($choice) {
            case '1':
                $newPassword = $this->generateStrongPassword();
                $this->info("Password m·ªõi: {$newPassword}");
                break;
            case '2':
                $this->newLine();
                $this->warn('Y√™u c·∫ßu password:');
                $this->line('   - √çt nh·∫•t 6 k√Ω t·ª±');
                $this->line('   - C√≥ ch·ªØ hoa (A-Z)');
                $this->line('   - C√≥ ch·ªØ th∆∞·ªùng (a-z)');
                $this->line('   - C√≥ s·ªë (0-9)');
                $this->line('   - C√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát (@#$%^&*!...)');
                $this->newLine();
                $newPassword = $this->secret('Nh·∫≠p password m·ªõi');
                if (! $this->validatePassword($newPassword)) {
                    $this->error('‚ùå Password ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª± v√† ch·ª©a:');
                    $this->error('- Ch·ªØ hoa (A-Z) - Ch·ªØ th∆∞·ªùng (a-z) - S·ªë (0-9) - K√Ω t·ª± ƒë·∫∑c bi·ªát (@#$%^&*!...)');
                    return;
                }
                break;
            case '3':
                $this->info('ƒê√£ h·ªßy!');
                return;
            default:
                $this->error('L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!');
                return;
        }

        $this->newLine();
        $this->warn('X√°c nh·∫≠n ƒë·ªïi password?');
        $this->line("   T√™n ƒëƒÉng nh·∫≠p: {$admin->username}");
        $this->line("   Password m·ªõi: {$newPassword}");
        $this->newLine();

        if (! $this->confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?')) {
            $this->info('ƒê√£ h·ªßy ƒë·ªïi password!');
            return;
        }

        try {
            $admin->update([
                'password'                 => Hash::make($newPassword),
                'access_token'             => null,
                'refresh_token'            => null,
                'refresh_token_expired_at' => null,
            ]);

            $this->newLine();
            $this->info('‚úÖ ƒê·ªïi password th√†nh c√¥ng!');
            $this->line('üìù Th√¥ng tin ƒëƒÉng nh·∫≠p m·ªõi:');
            $this->line("   T√™n ƒëƒÉng nh·∫≠p: {$admin->username}");
            $this->line("   Password: {$newPassword}");
            $this->newLine();
            $this->warn('‚ö†Ô∏è  H√£y l∆∞u th√¥ng tin n√†y ·ªü n∆°i an to√†n!');
            $this->info('üîí T·∫•t c·∫£ token ƒë√£ ƒë∆∞·ª£c x√≥a ƒë·ªÉ ƒë·∫£m b·∫£o b·∫£o m·∫≠t');

            // Log ho·∫°t ƒë·ªông
            \Log::info('Admin password reset', [
                'admin_id'       => $admin->id,
                'admin_username' => $admin->username,
                'reset_by'       => 'admin_manager_command',
                'tokens_cleared' => true,
                'timestamp'      => now(),
            ]);

        } catch (\Exception $e) {
            $this->error("‚ùå L·ªói khi ƒë·ªïi password: " . $e->getMessage());
        }
    }

    private function validatePassword($password)
    {
        // Ki·ªÉm tra ƒë·ªô d√†i t·ªëi thi·ªÉu
        if (strlen($password) < 6) {
            return false;
        }

        // Ki·ªÉm tra ch·ªØ hoa
        if (! preg_match('/[A-Z]/', $password)) {
            return false;
        }

        // Ki·ªÉm tra ch·ªØ th∆∞·ªùng
        if (! preg_match('/[a-z]/', $password)) {
            return false;
        }

        // Ki·ªÉm tra s·ªë
        if (! preg_match('/[0-9]/', $password)) {
            return false;
        }

        // Ki·ªÉm tra k√Ω t·ª± ƒë·∫∑c bi·ªát
        if (! preg_match('/[@#$%^&*!()_+\-=\[\]{};\':"\\|,.<>\/?]/', $password)) {
            return false;
        }

        return true;
    }

    private function generateStrongPassword()
    {
        $length = 12;

        // ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 1 k√Ω t·ª± c·ªßa m·ªói lo·∫°i
        $uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $lowercase = 'abcdefghijklmnopqrstuvwxyz';
        $numbers   = '0123456789';
        $special   = '@#$%^&*';

        $password = '';

        // Th√™m 1 k√Ω t·ª± c·ªßa m·ªói lo·∫°i
        $password .= $uppercase[rand(0, strlen($uppercase) - 1)];
        $password .= $lowercase[rand(0, strlen($lowercase) - 1)];
        $password .= $numbers[rand(0, strlen($numbers) - 1)];
        $password .= $special[rand(0, strlen($special) - 1)];

        // Th√™m c√°c k√Ω t·ª± ng·∫´u nhi√™n c√≤n l·∫°i
        $allCharacters = $uppercase . $lowercase . $numbers . $special;
        for ($i = 4; $i < $length; $i++) {
            $password .= $allCharacters[rand(0, strlen($allCharacters) - 1)];
        }

        // Tr·ªôn ng·∫´u nhi√™n password
        return str_shuffle($password);
    }
}
